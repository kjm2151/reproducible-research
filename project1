## 1. Code for reading in the dataset and/or processing the data
data_raw <- read.csv(file = "C:/Users/Device Admin/Documents/coursera/activity/activity.csv",
                    header = TRUE, sep = ",")


##Process/transform the data (if necessary) into a format suitable for your analysis
# Transform and create date data attributes

# convert data type to date format
data_raw$date <- as.POSIXct(data_raw$date, format="%Y-%m-%d")

# create columns to identify weekend and weekdays 
data <- data.frame(date=data_raw$date, 
                           weekday=tolower(weekdays(data_raw$date)), 
                           steps=data_raw$steps, 
                           interval=data_raw$interval)

data<- cbind(data, 
                      daytype=ifelse(data$weekday == "Saturday" | 
                                       data$weekday == "Sunday", "weekend", 
                                     "weekday"))


## 2. Histogram of the total number of steps taken each day

## What is mean total number of steps taken per day?

sum_data <- aggregate(data$steps, by=list(data$date), FUN=sum, na.rm=TRUE)
names(sum_data) <- c("date", "steps")

hist(sum_data$steps, 
     breaks=seq(from=0, to=25000, by=2500),
     col="gray", 
     xlab="Number of steps", 
     ylim=c(0, 20), 
     main="Total number of steps taken per day (NA removed)")
     
dev.copy(png, file="plot1.png", height=480, width=480)
dev.off()


##  3. Mean and median number of steps taken each day
mean(sum_data$steps)
median(sum_data$steps)
##############################
##> mean(sum_data$steps)
##[1] 9354.23
##> median(sum_data$steps)
##[1] 10395
##############################


## 4. Time series plot of the average number of steps taken

mean_data <- aggregate(data$steps, 
                       by=list(data$interval), 
                       FUN=mean, 
                       na.rm=TRUE)
names(mean_data) <- c("5min Interval", "mean")

plot(mean_data$"5min Interval", 
     mean_data$mean, 
     type="l", 
     col="blue", 
     lwd=2, 
     xlab="5min Interval", 
     ylab="Average number of steps", 
     main="Average number of steps per 5 minutes interval (NA removed)")

dev.copy(png, file="AVG_NUM_STEPS_PER_INTERVAL.png")
dev.off()

##  5. The 5-minute interval that, on average, contains the maximum number of steps
mean_data[which(mean_data$mean == max(mean_data$mean)), 1]
##############
#[1] 835
##############


##  6. Code to describe and show a strategy for imputing missing data
# Calculate and report the total number of missing values in the dataset (i.e. the total number of rows with 𝙽𝙰s)
#####################################
#> sum(is.na(data$steps))
#[1] 2304
#####################################
# imputing missing data
naposi <- which(is.na(data$steps))
mean_vec <- rep(mean(data$steps, na.rm=TRUE), times=length(naposi))

data[naposi, "steps"] <- mean_vec

## 7. Histogram of the total number of steps taken each day after missing values are imputed
sum_data <- aggregate(data$steps, by=list(data$date), FUN=sum, na.rm=TRUE)

names(sum_data) <- c("date", "steps")

hist(sum_data$steps, 
     breaks=seq(from=0, to=25000, by=2500),
     col="gray", 
     xlab="Number of steps", 
     ylim=c(0, 30), 
     main="Total number of steps taken per day (NA replaced by Mean)")


## 8. Panel plot comparing the average number of steps taken per 5-minute interval across weekdays and weekends
library(lattice)


mean_data <- aggregate(data$steps, 
                       by=list(data$daytype, data$weekday, data$interval), mean)
names(mean_data) <- c("daytype", "dayofweek", "interval", "mean")

xyplot(mean ~ interval | daytype, mean_data, 
       type="l", 
       lwd=1, 
       xlab="Interval", 
       ylab="Number of steps", 
       layout=c(1,2))
